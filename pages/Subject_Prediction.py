import streamlit as st
import pandas as pd
import openai
import base64
import openpyxl
import numpy
import io 
import os
import time
import pdfkit
from jinja2 import Environment, FileSystemLoader
import openai
import pandas as pd
from io import StringIO
import base64
######################## ################################################################################################################################################################################

openai.api_key =openai.api_key

st.set_page_config(layout="wide")

hide_st_style = """
                <style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                header {visibility: hidden;}
                </style>
                """
st.markdown("""
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    """, unsafe_allow_html=True)



st.markdown(
    """
    <style>
    
    body {
        background-color: #ffffff; /* Couleur de fond par d√©faut */
        color: #000000; /* Couleur de texte par d√©faut */
        font-family: Arial, sans-serif;
        padding: 1rem;
    }
    .video-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 500px; /* Ajustez la hauteur de la vid√©o selon vos besoins */
    }
    
    
.stApp {
    /* Utilisez l'URL de votre image comme valeur de background-image */
    background-image: url('https://cdn.pixabay.com/photo/2023/05/24/17/49/ai-generated-8015425_640.jpg');
    background-size: contain; /* Ajuste la taille de l'image pour qu'elle soit contenue dans l'arri√®re-plan */
    background-repeat: no-repeat; /* Emp√™che la r√©p√©tition de l'image */
    background-position: center center; /* Centre l'image horizontalement et verticalement */
    color: #ffffff;
    font-family: Arial, sans-serif;
    padding: 1rem;
}

    .stButton button {
        background-color:#866ef0;
        color:white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .stButton button:hover {
        background-color:#D3F7F4;
    }

    .stHeader {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    
    </style>
    """,
    unsafe_allow_html=True
)

######################## ################################################################################################################################################################################


def update_comments(df):
    openai.api_key = openai.api_key

    # Initialiser les nouvelles colonnes dans le DataFrame si elles n'existent pas encore
    if 'R√©sum√©' not in df.columns:
        df['R√©sum√©'] = ''
    if 'Titre' not in df.columns:
        df['Titre'] = ''
    if 'Points' not in df.columns:
        df['Points'] = ''
    if 'Script' not in df.columns:
        df['Script'] = ''

    for index, row in df.iterrows():
        commentaire = row['Comment']
        
        print(f"Traitement du commentaire √† l'index {index}: {commentaire}")  # Debug

        try:
            # G√©n√©rer le r√©sum√© du commentaire
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Tu es un assistant qui aide √† r√©sumer des commentaires en fran√ßais."},
                    {"role": "user", "content": f"R√©sume le commentaire suivant NB: √©cris uniquement en langue fran√ßaise n'√©cris surtout pas en anglais : \"{commentaire}\""}
                ],
                max_tokens=150,
                temperature=0.5,
                n=1,
            )
            resume_commentaire = response['choices'][0]['message']['content'].strip()
            print(f"R√©sum√© pour l'index {index}: {resume_commentaire}")  # Debug

            # G√©n√©rer le titre de la vid√©o
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Tu es un assistant qui aide √† cr√©er des titres de vid√©os YouTube en fran√ßais."},
                    {"role": "user", "content": f"Via ce r√©sum√© de commentaire, donne un titre de vid√©o YouTube NB: √©cris uniquement en langue fran√ßaise n'√©cris surtout pas en anglais : \"{resume_commentaire}\""}
                ],
                max_tokens=60,
                temperature=0.5,
            )
            titre_video = response['choices'][0]['message']['content'].strip()
            print(f"Titre pour l'index {index}: {titre_video}")  # Debug

            # G√©n√©rer les points √† aborder
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Tu es un assistant qui aide √† cr√©er des points √† aborder dans des vid√©os YouTube en fran√ßais."},
                    {"role": "user", "content": f"Donne les diff√©rents points que devrait aborder une vid√©o bas√©e sur ce titre. NB: √©cris uniquement en langue fran√ßaise n'√©cris surtout pas en anglais : \"{titre_video}\""}
                ],
                max_tokens=150,
                temperature=0.5,
            )
            points = response['choices'][0]['message']['content'].strip()
            print(f"Points pour l'index {index}: {points}")  # Debug

            # G√©n√©rer le script de la vid√©o
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Tu es un g√©n√©rateur de script de vid√©os YouTube."},
                    {"role": "user", "content": f"Consid√®re que tu es un g√©n√©rateur de script de vid√©os YouTube !! R√©dige alors un script de vid√©o YouTube africanis√© bas√© sur les points que tu as donn√©s pr√©c√©demment. NB: √©cris uniquement en langue fran√ßaise n'√©cris surtout pas en anglais : \"{points}\""}
                ],
                max_tokens=150,
                temperature=0.5,
            )
            script = response['choices'][0]['message']['content'].strip()
            print(f"Script pour l'index {index}: {script}")  # Debug

            # Mettre √† jour le DataFrame avec les nouvelles informations
            df.at[index, 'R√©sum√©'] = resume_commentaire
            df.at[index, 'Titre'] = titre_video
            df.at[index, 'Points'] = points
            df.at[index, 'Script'] = script

        except openai.OpenAIError as e:
            print(f"Une erreur d'API est survenue pour l'index {index}: {str(e)}")
        except Exception as e:
            print(f"Une erreur est survenue pour l'index {index}: {str(e)}")

    return df



######################## ################################################################################################################################################################################


def generate_html(df):
    env = Environment(loader=FileSystemLoader('templates'))
    template = env.get_template('prediction3.html')
    html = template.render(data=df.to_dict('records'))

    return html    


######################## ################################################################################################################################################################################


def main():
    html_titre = """ 
        <div style="padding: 13px; background-color: #866ef0; border: 5px solid #0d0c0c; border-radius: 10px;">
        <h1 style="color:#0d0c0c; text-align: center; background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));">ü§ñ ANALYSEUR DE SENTIMENT ET PREDICATEUR DE SUJETSü§ñ<small><br> Powered by An\'s Learning </h3></h1></h1>
        </div> 
        </div> 
        """
    
    st.markdown(html_titre, unsafe_allow_html = True)

    st.markdown('<p style="text-align: center;font-size:15px;" > <bold><center><h1 style="color:#D3F7F4"> <bold>UPLOADER LE FICHIER DONT VOUS VOULEZ AVOIR LA PREDICTION DE SUJET DE VIDEO YOUTUBE<h1></bold><p>', unsafe_allow_html=True)
 
    output_dir = 'Subjets_Prediction_Of_Videos'
    os.makedirs(output_dir, exist_ok=True)  

    uploaded_file = st.file_uploader("Entrer le fichier Excel", type=['xls', 'xlsx'])

    if uploaded_file is not None:
        data = pd.read_excel(uploaded_file)
        file_name = os.path.splitext(uploaded_file.name)[0]
        
        if st.button('Prediction'):
            updated_data = update_comments(data)

            html_content = generate_html(updated_data)
            html_file = StringIO(html_content)
            html_file.seek(0)
            
            b64 = base64.b64encode(html_file.read().encode()).decode()
            href = f'<a href="data:text/html;base64,{b64}" download="subject_Prediction_of_{file_name}.html">T√©l√©charger les predictions</a>'
            st.markdown(href, unsafe_allow_html=True)
            st.snow()
            

# Ex√©cuter la fonction principale
if __name__ == "__main__":
    main()


######################## ################################################################################################################################################################################
