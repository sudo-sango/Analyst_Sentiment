import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import tensorflow as tf
import sentencepiece
import time
import io
import h5py as h5
from transformers import AutoTokenizer, TFCamembertForSequenceClassification, TFCamembertModel


######################## ################################################################################################################################################################################
st.set_page_config(layout="wide")

hide_st_style = """
                <style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                header {visibility: hidden;}
                </style>
                """

st.markdown("""
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    """, unsafe_allow_html=True)


st.markdown(
    """
    <style>
    
    body {
        background-color: #ffffff; /* Couleur de fond par d√©faut */
        color: #000000; /* Couleur de texte par d√©faut */
        font-family: Arial, sans-serif;
        padding: 1rem;
    }
    .video-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 500px; /* Ajustez la hauteur de la vid√©o selon vos besoins */
    }
    
    
   .stApp {
        /* Utilisez l'URL de votre image comme valeur de background-image */
      
        background-image: url('https://cdn.pixabay.com/photo/2021/11/04/06/27/artificial-intelligence-6767502_640.jpg');
        background-size: contain; /* Ajuste la taille de l'image pour couvrir tout l'arri√®re-plan */
        background-repeat: no-repeat; /* Emp√™che la r√©p√©tition de l'image */
        background-position: center center; /* Centre l'image horizontalement et verticalement */
        color: #ffffff;
        font-family: Arial, sans-serif;
        padding: 1rem;
        
        background-attachment: scroll; # doesn't work;
        
    }


    
    .stButton button {
        background-color:#866ef0;
        color:white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .stButton button:hover {
        background-color:#D3F7F4;
    }

    .stHeader {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    
    </style>
    """,
    unsafe_allow_html=True
)


######################## ################################################################################################################################################################################

# D√©finition des classes
classes = {0: 'n√©gatif', 1: 'neutre', 2: 'positif'}

# Fonction pour charger le mod√®le
#@st.cache_resource
def load_model_file():
    chemin = os.path.dirname(os.path.abspath(__file__))
    filenames = os.listdir(chemin)
    filenames = [f for f in filenames if f.endswith('.h5')]
    
    if len(filenames) == 0:
        st.error("Aucun fichier de mod√®le trouv√© dans le r√©pertoire.")
        return None
    
    selected_filename = st.selectbox('Choisissez votre mod√®le ', filenames, key='model_select')
    model_path = os.path.join(chemin, selected_filename)
    
    # Affichage de la barre de progression
    progress_text = "Chargement du mod√®le en cours. Veuillez patienter..."
    my_bar = st.progress(0, text=progress_text)
    
    try:
        # Chargement du mod√®le
        model = tf.keras.models.load_model(model_path, custom_objects={'TFCamembertModel': TFCamembertModel}, compile=False)
        
        # Mise √† jour de la barre de progression
        for percent_complete in range(100):
            time.sleep(0.1)
            my_bar.progress(percent_complete + 1, text=progress_text)
        
        # Succ√®s du chargement
        st.success("Mod√®le charg√© avec succ√®s !")
        return model
    
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le : {str(e)}")
        return None

######################## ################################################################################################################################################################################

# Fonction pour pr√©dire le sentiment d'un Commentaire# Fonction pour pr√©dire le sentiment d'un Commentaire
def predict_sentiment(Comment, model, tokenizer):
    # Encodage du Commentaire avec le tokenizer
    inputs = tokenizer.encode_plus(Comment, add_special_tokens=True, return_tensors='tf', max_length=256, padding='max_length', truncation=True)
    # Pr√©diction du sentiment avec le mod√®le
    prediction = model.predict([inputs['input_ids'], inputs['attention_mask']])[0]
    # R√©cup√©ration de l'indice de la classe pr√©dite
    predicted_class_idx = np.argmax(prediction)
    # R√©cup√©ration du label de la classe pr√©dite
    predicted_class = classes[predicted_class_idx]
    
    return predicted_class


######################## ################################################################################################################################################################################

# Fonction pour afficher le diagramme
def plot_sentimentss(df):
    sentiment_counts = df['sentiment'].value_counts()
    fig, ax = plt.subplots()
    ax.bar(sentiment_counts.index, sentiment_counts.values, color=['green', 'gray', 'red'])
    ax.set_title('R√©partition des sentiments')
    ax.set_xlabel('Sentiments')
    ax.set_ylabel('Nombre de Commentaires')
    # Ajout de la l√©gende avec des valeurs num√©riques
    for i, v in enumerate(sentiment_counts.values):
        ax.text(i, v+1, str(v), ha='center', fontweight='bold')
    st.pyplot(fig)


def plot_sentiments(df):
    sentiment_counts = df['sentiment'].value_counts()
    fig, ax = plt.subplots(figsize=(6, 2))  # Sp√©cification de la taille de la figure
    ax.bar(sentiment_counts.index, sentiment_counts.values, color=['#6f00ff', '#009dff', '#0a0a0a'])  # Couleurs hexad√©cimales
    ax.set_title('R√©partition des sentiments', fontsize=12, fontweight='bold')
    ax.set_xlabel('Sentiments', fontsize=8)
    ax.set_ylabel('Nombre de Commentaires', fontsize=8)
    
    # Ajout de la l√©gende avec des valeurs num√©riques
    #for i, v in enumerate(sentiment_counts.values):
    #    ax.text(i, v + 1, str(v), ha='center', fontweight='bold', fontsize=6)
    
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    
    st.pyplot(fig)

#optimise moi cette fonction pour qu'elle soit plus belle, mets les mesures de la figure et que les courleurs mise soit hexadecimal'




######################## ################################################################################################################################################################################


def main():
   

    html_titre = """ 
        <div style="padding: 13px; background-color: #866ef0; border: 5px solid #0d0c0c; border-radius: 10px;">
        <h1 style="color:#0d0c0c; text-align: center; background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));">ü§ñ ANALYSEUR DE SENTIMENT ET PREDICATEUR DE SUJETSü§ñ<small><br> Powered by An\'s Learning </h3></h1></h1>
        </div> 
        </div> 
        """
    
    st.markdown(html_titre, unsafe_allow_html = True)

    st.markdown('<p style="text-align: center;font-size:15px;" > <bold><center><h1 style="color:#D3F7F4"> <bold>UPLOADER LE FICHIER DONT VOUS VOULEZ AVOIR LA PREDICTION DE SUJET DE VIDEO YOUTUBE<h1></bold><p>', unsafe_allow_html=True)
    
    # Upload du fichier
    uploaded_file = st.file_uploader("Choisissez un fichier Excel ou CSV", type=["xlsx", "csv"])

    # Bouton pour lancer la pr√©diction
    if st.button("Lancer la pr√©diction"):
        if uploaded_file is not None:
            file_name = uploaded_file.name
            try:
                df = pd.read_excel(uploaded_file) if file_name.endswith('.xlsx') else pd.read_csv(uploaded_file, encoding='utf-8', errors='ignore')
            except UnicodeDecodeError:
                st.error("Erreur de d√©codage du fichier. Veuillez v√©rifier l'encodage.")
                return
            
            st.write(df)

            # Chargement du mod√®le
            with st.spinner('Chargement du mod√®le...'):
                model = load_model_file()
                tokenizer = AutoTokenizer.from_pretrained("camembert/camembert-base-ccnet")

            # Pr√©diction et affichage des r√©sultats
            with st.spinner('Pr√©diction des sentiments des Commentaires...'):
                df['sentiment'] = df['Comment'].apply(lambda x: predict_sentiment(x, model, tokenizer))
                plot_sentiments(df)

                # Cr√©er le nom du fichier de sortie
                base_name, ext = os.path.splitext(file_name)
                output_file_name = f"analysis_sentiment_of_videos_{base_name}{ext}"

                # Cr√©er le chemin complet du fichier de sortie
                output_file_path = os.path.join("Analysis_Sentiment_Of_Videos", output_file_name)

                # Cr√©er le r√©pertoire s'il n'existe pas
                os.makedirs("Analysis_Sentiment_Of_Videos", exist_ok=True)

                # Sauvegarder le fichier dans le r√©pertoire "eriko"
                df.to_csv(output_file_path, index=False, encoding='utf-8', errors='ignore')

                # T√©l√©chargement du fichier de r√©sultats
                with open(output_file_path, "r", encoding='utf-8', errors='ignore') as f:
                    with st.spinner('Chargement du mod√®le...'):
                        st.download_button(label="T√©l√©charger les r√©sultats", data=f.read(), file_name=output_file_name, mime='text/csv')
                        #download_button = st.download_button(label="T√©l√©charger les r√©sultats", data=f.read(), file_name=output_file_name, mime='text/csv')
                        #download_button 
                # Bouton pour r√©initialiser le fichier et le diagramme
                if st.button("R√©initialiser"):
                    uploaded_file = None

# Lancement de l'application
if __name__ == "__main__":
    main()


######################## ################################################################################################################################################################################
